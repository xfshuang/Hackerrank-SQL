~Type of Triangle
Write a query identifying the type of each record in the TRIANGLES table using its three side lengths.
""select 
case
    when a = b and a = c then 'Equilateral'
    when a = b or a = c or b =c then 'Isosceles'
    when a+b <= c or a + c<= b or b + c <= a then 'Not A Triangle'
    else 
        'Scalene'
    end
from Triangles'''

select 
case
    when a+b <= c or a + c<= b or b + c <= a then 'Not A Triangle'
    when a = b and b = c then 'Equilateral'
    when a = b or b =c or a = c  then 'Isosceles'
    else 'Scalene'
    end
from Triangles




~The PADS
select concat(name, '(', SUBSTRING(occupation,1,1), ')') as name from occupations
order by name asc;

select concat('There are a total of ', count(occupation), ' ',concat(lower(occupation), 's.')) from occupations
group by occupation
order by count(occupation)

Occupations
set @r1=0, @r2=0, @r3=0, @r4=0;
select min(Doctor), min(Professor), min(Singer), min(Actor)
from(
  select case when Occupation='Doctor' then (@r1:=@r1+1)
            when Occupation='Professor' then (@r2:=@r2+1)
            when Occupation='Singer' then (@r3:=@r3+1)
            when Occupation='Actor' then (@r4:=@r4+1) end as Rownumb,
    case when Occupation='Doctor' then name end as Doctor,
    case when Occupation='Professor' then name end as Professor,
    case when Occupation='Singer' then name end as Singer,
    case when Occupation='Actor' then name end as Actor
  from OCCUPATIONS
  order by name
) Temp
group by Rownumb;




~Binary Tree Nodes
select N,
case when P is null then 'Root' 
     when N in (select p from BST) then 'Inner'
     else 'Leaf'
     end
from Bst
order by n;


~New Companies
select c.company_code, c.founder, 
count(distinct e.lead_manager_code),
count(distinct e.senior_manager_code),
count(distinct e.manager_code),
count(distinct e.employee_code)
FROM company as c JOIN employee as e
ON c.company_code = e.company_code
group by c.company_code, c.founder
order by c.company_code;